#!/usr/bin/env bash

############################################################
# mutt_send
#
# This script acts as a proxy between mutt and the mail
# delivery program and handles tasks such as marking mails
# as replied.
#
# License: GPLv3
#
# (c) Till Smejkal - till.smejkal+mutttools@ossmail.de
############################################################

# Global variables
TEMP_DIR=${XDG_RUNTIME_DIR:-/tmp}/mutt/send

# Helper functions
function usage() {
    cat << EOF
mutt_send [OPTIONS] SENDMAIL [SENDMAIL OPTIONS]

Proxy for sendmail which will handle various additional tasks
such as marking mails as replied.

Options:
    --help
    -h      Print this help message.

SENDMAIL    The sendmail binary that should be used.
SENDMAIL OPTIONS
            Additional options that should be forwarded to the
            used sendmail binary.
EOF
}

function log() {
    echo $@ >&3
}

# -- setup --
mkdir -p ${TEMP_DIR}

# create pipe for logging to journald
PIPE=$(mktemp -up ${TEMP_DIR})
mkfifo $PIPE

systemd-cat -t $(basename $0) < $PIPE &
if [ $? -ne 0 ]; then
    echo "Failed to setup systemd logging" >> ~/send_log
fi

exec 3>$PIPE

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    usage
    exit 0
elif [[ $# -lt 1 ]]; then
    echo -en "1 argument expected, $# given.\n\n"
    usage
    exit 1
fi

_mail_content=$(cat)
_sendmail=$1

shift

if ! command -V "$_sendmail" &>/dev/null; then
    # The first argument that we got is *not* an executable binary
    echo -ne "$_sendmail is not executable.\n\n"
    usage
    exit 1
fi

# -- pre processing --
_from=$(grep "^From: " <<< $_mail_content | sed 's/From: \(.*\)/\1/')
_to=$(grep "^To: " <<< $_mail_content | sed 's/To: \(.*\)/\1/')
_replied_to=$(grep "^In-Reply-To:" <<< $_mail_content | sed 's/In-Reply-To: <\(.*\)>/\1/')

# -- send mail --
$_sendmail "$@" <<< $_mail_content
_exit_code=$?

# -- post processing --
if [ $_exit_code -eq 0 ]; then
    _result="Successfully($_exit_code) sent"
else
    _result="Failed($_exit_code) to send"
fi

log "$_result mail to $_to using [$_sendmail $@]."

if [ $_exit_code -eq 0 ]; then
    # Mark messages as replied-to if necessary.
    if [ ! -z "$_replied_to" ]; then
        # Check if we need to update the notmuch database first.
        if [ -z "$(notmuch search id:$_replied_to)" ]; then
            notmuch new
        fi

        notmuch tag +replied "id:$_replied_to"

        log "Tagged mail ($_replied_to) as replied-to."
    fi
fi

# -- exit --
exit $_exit_code
